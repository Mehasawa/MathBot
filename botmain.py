import time
import random
import main
import telebot
import sqlite3

#t.me/AlabugaMathtest_bot.
#7463754915:AAG0fnfEqlVaRg_hv6WB6-Qt3jISJK9R5gc
token='7605231410:AAFT8E36Eaod_9kDAXk1ey6Jbz8eYv8wNmk'

bot = telebot.TeleBot(token)


# –°–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞
WAITING_FOR_ANSWER = 0
SENDING_NEXT_QUESTION = 1

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_data = {}

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏ –∏ —ç–º–æ–¥–∑–∏
keyboard = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
button1 = telebot.types.KeyboardButton("üëç –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞")  # –≠–º–æ–¥–∑–∏ üëç
button2 = telebot.types.KeyboardButton("üöÄ –°–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–µ")  # –≠–º–æ–¥–∑–∏ üöÄ
keyboard.add(button1, button2)

def primer(a=1):#–≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–∏–º–µ—Ä—ã –Ω–∞ —É–º–Ω–æ–∂–µ–Ω–∏–µ
    if a==1:
        num1=random.randint(2,9)
        num2=random.randint(2,9)
    elif a==2:
        num1=10
        while num1%10==0:
            num1 = random.randint(12, 99)
            num2 = random.randint(2, 9)
    elif a==3:
        num1 = 10
        num2 = 10
        while num1 % 10 == 0 and num2 % 10 == 0:
            num1 = random.randint(12, 99)
            num2 = random.randint(12, 99)
    problem = f'{num1} * {num2} = '
    answer = num1*num2
    print(problem,answer)#####################
    return problem,answer

def generate_error_message(error_count):
    print(error_count)
    if error_count == 1:
        return "–∫–∞"
    elif 2 <= error_count <= 4:
        return "–∫–∏"
    else:
        return "–æ–∫"

"""–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
def send_next_question(chat_id, user_id):
    print('next')####################
    user_data[user_id]["current_question"] += 1
    print(user_data[user_id]["current_question"], user_data[user_id]["score"],)########################
    if user_data[user_id]["current_question"] > 4:
        end_time = time.time()#–∫–æ–Ω–µ—Ü –≤—Ä–µ–º–µ–Ω–∏
        total_time = end_time - user_data[user_id]["start_time"]
        if user_data[user_id]['score']==user_data[user_id]["current_question"]-1:
            bot.send_message(chat_id,
                      f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –≤—ã –ø—Ä–æ—à–ª–∏ –±–µ–∑ –æ—à–∏–±–æ–∫.\n–í—Ä–µ–º—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è: {total_time:.2f} —Å–µ–∫—É–Ω–¥.",
                             reply_markup=keyboard)
            main.newscore(user_data[user_id]['studentname'],total_time)
        else:

            bot.send_message(chat_id,
                             f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, —É –≤–∞—Å {user_data[user_id]["current_question"]-user_data[user_id]["score"]-1} "
                             f"–æ—à–∏–±{generate_error_message(user_data[user_id]["current_question"]-user_data[user_id]["score"]-1)}. –í—Ä–µ–º—è –Ω–µ –∑–∞—Å—á–∏—Ç–∞–Ω–æ.",
                             reply_markup=keyboard)
        del user_data[user_id]
        return

    print(user_data)

    if user_data[user_id]["current_question"] <8:
            problem, answer = primer(1)
            #–ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–æ —á—Ç–æ –ø—Ä–∏–º–µ—Ä —É–∂–µ –ø–æ–ø–∞–¥–∞–ª—Å—è
            while problem in user_data[user_id]['list']:
                problem, answer = primer(1)
    elif user_data[user_id]["current_question"] < 11:
            problem, answer = primer(2)
            # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–æ —á—Ç–æ –ø—Ä–∏–º–µ—Ä —É–∂–µ –ø–æ–ø–∞–¥–∞–ª—Å—è
            while problem in user_data[user_id]['list']:
                problem, answer = primer(2)
    elif user_data[user_id]["current_question"] < 21:
            problem, answer = primer(3)
            # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–æ —á—Ç–æ –ø—Ä–∏–º–µ—Ä —É–∂–µ –ø–æ–ø–∞–¥–∞–ª—Å—è
            while problem in user_data[user_id]['list']:
                problem, answer = primer(3)

    user_data[user_id]['list'].append(problem) #–≤ —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–º–µ—Ä–æ–≤
    user_data[user_id]["problem"] = problem
    user_data[user_id]["answer"] = answer

    bot.send_message(chat_id, problem)
def whatname(message):
    if message.from_user.first_name and message.from_user.last_name:
        studentname = f'{message.from_user.first_name} {message.from_user.last_name}'
    elif message.from_user.first_name:
        studentname = message.from_user.first_name
    else:
        studentname = message.from_user.username
    return studentname

#–°–¢–ê–†–¢–û–í–û–ï –°–û–û–ë–©–ï–ù–ò–ï:
@bot.message_handler(commands=['start'])
def start(message):
    print(message)
    studentname=whatname(message)
    bot.send_message(message.chat.id, f"–ü—Ä–∏–≤–µ—Ç! {studentname} –≠—Ç–æ MathBot, –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º:", reply_markup=keyboard)

#–†–ï–ñ–ò–ú –¢–ï–†–ù–ò–†–û–í–ö–ò
@bot.message_handler(func=lambda message: message.text == "üëç –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞")
def button1_handler(message):
    bot.send_message(message.chat.id, "–†–µ–∂–∏–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ üëç!", reply_markup=telebot.types.ReplyKeyboardRemove())

#–†–ï–ñ–ò–ú –°–û–†–ï–í–ù–û–í–ê–ù–ò–Ø
@bot.message_handler(func=lambda message: message.text == "üöÄ –°–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–µ")
def button2_handler(message):
    spisokemo = ['3Ô∏è‚É£', '2Ô∏è‚É£', '1Ô∏è‚É£']
    user_id = message.from_user.id
    # —Å–µ—Å—Å–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data[user_id] = {
        "state": WAITING_FOR_ANSWER,
        "current_question": 0,
        "score": 0,
        "problem": None,
        "answer": None,
        "start_time": time.time(),
        'list':[],
        'studentname':''
    }
    bot.send_message(message.chat.id, "–°–æ—Ä–µ–≤–Ω–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π —Ä–µ–∂–∏–º üöÄ!",reply_markup=telebot.types.ReplyKeyboardRemove())
    for i in range(3):#–æ–±—Ä–∞—Ç–Ω—ã–π –æ—Ç—Å—á–µ—Ç
        time.sleep(1)
        bot.send_message(message.chat.id,spisokemo[i])
    user_data[user_id]['start_time']=time.time()#—Å—Ç–∞—Ä—Ç –≤—Ä–µ–º–µ–Ω–∏
    user_data[user_id]['studentname']=whatname(message)
    send_next_question(message.chat.id, user_id)


@bot.message_handler(func=lambda message: True)
def handle_message(message):
    user_id = message.from_user.id
    print(user_id)#################################
    if user_id not in user_data:
        return

    if user_data[user_id]["state"] == WAITING_FOR_ANSWER:
        try:
            user_answer = int(message.text)
            correct_answer = user_data[user_id]["answer"]
            print(user_data)
            if user_answer == correct_answer:
                user_data[user_id]["score"] += 1
                bot.send_message(message.chat.id, "–ü—Ä–∞–≤–∏–ª—å–Ω–æ!")
            else:
                bot.send_message(message.chat.id, f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ! –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_answer}")

            user_data[user_id]["state"] = SENDING_NEXT_QUESTION
            send_next_question(message.chat.id, user_id)
            print(user_data)
            if user_id in user_data:
                    user_data[user_id]["state"] = WAITING_FOR_ANSWER

        except ValueError:
            bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        # print(user_data[user_id]["current_question"], user_data[user_id]["score"], )  #####
# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.polling(none_stop=True)