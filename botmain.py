import time
import mainbase
import telebot
import fromGenerate
import fromBaseZadachi
from telebot import types

#t.me/AlabugaMathtest_bot.
from tokenpy import token
bot = telebot.TeleBot(token)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞
WAITING_FOR_ANSWER = 0
SENDING_NEXT_QUESTION = 1
FIRST_CHOICE = 1
SECOND_CHOICE = 2
THIRD_CHOICE = 3

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_data = {}
QUESTIONLEN=2

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏ –∏ —ç–º–æ–¥–∑–∏
keyboard1 = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
button1 = telebot.types.KeyboardButton("üëç –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞")  # –≠–º–æ–¥–∑–∏ üëç
button2 = telebot.types.KeyboardButton("üöÄ –°–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–µ")  # –≠–º–æ–¥–∑–∏ üöÄ
keyboard1.add(button1, button2)

keyboard2 = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
buttons = [telebot.types.KeyboardButton(f"üëç –£—Ä–æ–≤–µ–Ω—å {i}") for i in range(1, 7)]
keyboard2.add(*buttons)

keyboard3 = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)

keyboardSRAVN = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
button1 = telebot.types.KeyboardButton("<")  #
button2 = telebot.types.KeyboardButton(">")  #
button3 = telebot.types.KeyboardButton("=")  #
keyboardSRAVN.add(button1, button2, button3)
'''
 –≠–º–æ–¥–∑–∏ üëçüòêüòÄüëÜüöÄüî•
'''
#–ü–û–ö–ê–ó–ê–¢–¨ –ö–õ–ê–í–ò–ê–¢–£–†–´
def show_first_choice_keyboard(message):
    print('–∫–ª–∞–≤–∞1')
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º:", reply_markup=keyboard1)

def show_second_choice_keyboard(message):
    print('–∫–ª–∞–≤–∞2')
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å:", reply_markup=keyboard2)

def show_third_choice_keyboardCOMP(message,k):
    print('–∫–ª–∞–≤–∞3')
    spisokTem =[['0 —É—Ä–æ–≤–µ–Ω—å'],
             ['üî•–ê—Ä–∏—Ñ–º–µ—Ç–∏–∫–∞'],
             ['üî•–ê—Ä–∏—Ñ–º–µ—Ç–∏–∫–∞','üöÄ–°—Ä–∞–≤–Ω–µ–Ω–∏—è'],
             ['üî•–í—ã—á–∏—Å–ª–µ–Ω–∏—è','üöÄ–°—Ä–∞–≤–Ω–µ–Ω–∏—è','üëÜ–û–∫—Ä—É–≥–ª–µ–Ω–∏–µ'],#3
             ['üî•–ê—Ä–∏—Ñ–º–µ—Ç–∏–∫–∞','üòÄ–í–µ–ª–∏—á–∏–Ω—ã','üöÄ–°—Ä–∞–≤–Ω–µ–Ω–∏—è'],
             ['üî•–í—ã—á–∏—Å–ª–µ–Ω–∏—è','üòÄ–í–µ–ª–∏—á–∏–Ω—ã','üöÄ–°—Ä–∞–≤–Ω–µ–Ω–∏—è','üëÜ–û–∫—Ä—É–≥–ª–µ–Ω–∏–µ'],#5
             ['üî•–í—ã—á–∏—Å–ª–µ–Ω–∏—è','üòÄ–í–µ–ª–∏—á–∏–Ω—ã','üöÄ–°—Ä–∞–≤–Ω–µ–Ω–∏—è']]
    k=int(k[-1])
    # print(k)
    keyboard3.keyboard=[]
    buttons = [telebot.types.KeyboardButton(f"{i}") for i in spisokTem[k]]
    # print(buttons)
    keyboard3.add(*buttons)
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É:", reply_markup=keyboard3)

def show_third_choice_keyboardTREN(message,k):
    print('–∫–ª–∞–≤–∞3')
    spisokTem =[['0 —É—Ä–æ–≤–µ–Ω—å'],
             ['üî•–ê—Ä–∏—Ñ–º–µ—Ç–∏–∫–∞','–ó–∞–¥–∞—á–∏','–§–∏–≥—É—Ä—ã','–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è'],
             ['üî•–ê—Ä–∏—Ñ–º–µ—Ç–∏–∫–∞','–ó–∞–¥–∞—á–∏','–§–∏–≥—É—Ä—ã','–ü–µ—Ä–∏–º–µ—Ç—Ä','üöÄ–°—Ä–∞–≤–Ω–µ–Ω–∏—è'],
             ['üî•–í—ã—á–∏—Å–ª–µ–Ω–∏—è','–ü–ª–æ—â–∞–¥—å','–ó–∞–¥–∞—á–∏','–§–∏–≥—É—Ä—ã','–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è','üöÄ–°—Ä–∞–≤–Ω–µ–Ω–∏—è'],
             ['üòÄ–í–µ–ª–∏—á–∏–Ω—ã','üî•–ê—Ä–∏—Ñ–º–µ—Ç–∏–∫–∞','üòê–ó–∞–¥–∞—á–∏ –Ω–∞ –¥–≤–∏–∂–µ–Ω–∏–µ','üòê–ó–∞–¥–∞—á–∏ –Ω–∞ —Ä–∞–±–æ—Ç—É','–ó–∞–¥–∞—á–∏ –∫—É–ø–ª–∏-–ø—Ä–æ–¥–∞–∂–∏','–£—Ä–∞–≤–Ω–µ–Ω–∏—è','üöÄ–°—Ä–∞–≤–Ω–µ–Ω–∏—è'],#'–ü–æ—Ä—è–¥–æ–∫ –¥–µ–π—Å—Ç–≤–∏–π'
             ['üî•–í—ã—á–∏—Å–ª–µ–Ω–∏—è','üòÄ–í–µ–ª–∏—á–∏–Ω—ã','üöÄ–°—Ä–∞–≤–Ω–µ–Ω–∏—è','üëÜ–û–∫—Ä—É–≥–ª–µ–Ω–∏–µ','–ó–∞–¥–∞—á–∏','üòê–ì–µ–æ–º–µ—Ç—Ä–∏—è','üòê–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥—Ä–æ–±–µ–π'],#'–ü—Ä–∏–∑–Ω–∞–∫–∏ –¥–µ–ª–∏–º–æ—Å—Ç–∏'
             ['üî•–í—ã—á–∏—Å–ª–µ–Ω–∏—è','üöÄ–°—Ä–∞–≤–Ω–µ–Ω–∏—è','–ó–∞–¥–∞—á–∏','–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–Ω–∞—è –ø—Ä—è–º–∞—è','üòÄ–í–µ–ª–∏—á–∏–Ω—ã','üòê–ì–µ–æ–º–µ—Ç—Ä–∏—è']]#'–ù–û–î –∏ –ù–û–ö'
    k=int(k[-1])
    # print(k)
    keyboard3.keyboard=[]
    buttons = [telebot.types.KeyboardButton(f"{i}") for i in spisokTem[k]]
    # print(buttons)
    keyboard3.add(*buttons)
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É:", reply_markup=keyboard3)

def generate_error_message(error_count):
    # print(error_count)
    if error_count == 1:
        return "–∫–∞"
    elif 2 <= error_count <= 4:
        return "–∫–∏"
    else:
        return "–æ–∫"

"""–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
def send_next_question(chat_id, user_id,message):
    problem,answer = '–ø—É—Å—Ç–æ','–ø—É—Å—Ç–æ'
    keyb=keyboard1
    print('next')####################
    user_data[user_id]["current_question"] += 1
    print(user_data[user_id]["current_question"], user_data[user_id]["score"],)########################
    if user_data[user_id]["current_question"] > QUESTIONLEN:
        end_time = time.time()#–∫–æ–Ω–µ—Ü –≤—Ä–µ–º–µ–Ω–∏
        total_time = end_time - user_data[user_id]["start_time"]
        if '–°–æ—Ä–µ–≤–Ω' in user_data[user_id]['first_choice']:
            if user_data[user_id]['score']==user_data[user_id]["current_question"]-1:
                print('–ø—Ä–æ—à–µ–ª –±–µ–∑ –æ—à–∏–±–æ–∫')
                bot.send_message(chat_id,
                          f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –≤—ã –ø—Ä–æ—à–ª–∏ –±–µ–∑ –æ—à–∏–±–æ–∫.\n–í—Ä–µ–º—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è: {total_time:.2f} —Å–µ–∫—É–Ω–¥.")
                mainbase.newscore(user_data[user_id]['studentname'],total_time)
                # start(message)
            else:
                print('–ø—Ä–æ—à–µ–ª —Å –æ—à–∏–±–∫–∞–º–∏')
                bot.send_message(chat_id,
                                 f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, —É –≤–∞—Å {user_data[user_id]['current_question']-user_data[user_id]['score']-1} "
                                 f"–æ—à–∏–±{generate_error_message(user_data[user_id]['current_question']-user_data[user_id]['score']-1)}. –í—Ä–µ–º—è –Ω–µ –∑–∞—Å—á–∏—Ç–∞–Ω–æ.")
                print('#########################')
            # print(user_data[user_id]["state"])
            print(user_data[user_id])
            #
        else:
            bot.send_message(chat_id,
                             f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, —É –≤–∞—Å {user_data[user_id]['current_question'] - user_data[user_id]['score'] - 1} "
                             f"–æ—à–∏–±{generate_error_message(user_data[user_id]['current_question'] - user_data[user_id]['score'] - 1)}.")

        del user_data[user_id]#—É–¥–∞–ª–∏—Ç—å —Å–µ—Å—Å–∏—é
        start(message)#–Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é
        return

    # print(user_data)
    if user_data[user_id]["start"]==1:
        print('–≤–∫–ª—é—á–∏–ª—Å—è —Å—Ç–∞—Ä—Ç')
        if user_data[user_id]["type_question"]=='srav':
            print('—Å—Ä–∞–≤–Ω–µ–Ω–∏—è')
            ########################################################################################
            keyb=keyboardSRAVN
            # keyb = types.ReplyKeyboardRemove()
            problem, answer = fromGenerate.taskcount(message, user_data)  # –≤–æ–ø—Ä–æ—Å –∏–∑ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        elif user_data[user_id]["type_question"] == 'base':
            print('–∏–∑ –±–∞–∑—ã')
            problem, answer, image = fromBaseZadachi.taskcount(message, user_data)  # –≤–æ–ø—Ä–æ—Å –∏–∑ –±–∞–∑—ã
            answer = str(answer).strip()
            answer = answer.replace(' ','_')
            if image!='none':
                user_data[user_id]["image"] = image
                try:
                    with open(image, 'rb') as photo:
                        bot.send_photo(chat_id, photo)#–æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–∞—Ä—Ç–∏–Ω–∫—É
                except FileNotFoundError:
                    bot.send_message(chat_id, "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                except Exception as e:
                    bot.send_message(chat_id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
                # bot.send_photo(chat_id, image)
            keyb=types.ReplyKeyboardRemove()
                #
        elif user_data[user_id]["type_question"] == 'number':
            print('–∞—Ä–∏—Ñ–º–µ—Ç–∏–∫–∞',user_data[user_id]["sub_type"])
            keyb=types.ReplyKeyboardRemove()
            # keyb = keyboardSRAVN
            problem,answer = fromGenerate.taskcount(message,user_data)#–≤–æ–ø—Ä–æ—Å –∏–∑ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        user_data[user_id]['list'].append(problem) #–≤ —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–º–µ—Ä–æ–≤
        print('–¥–æ–±–∞–≤–∏–ª –ø—Ä–∏–º–µ—Ä –≤ –ª–∏—Å—Ç')
        user_data[user_id]["problem"] = problem
        user_data[user_id]["answer"] = answer

        bot.send_message(chat_id, problem ,reply_markup=keyb)

def whatname(message):
    print('—É–∑–Ω–∞–µ—Ç –∏–º—è')
    if message.from_user.first_name and message.from_user.last_name:
        studentname = f'{message.from_user.first_name} {message.from_user.last_name}'
    elif message.from_user.first_name:
        studentname = message.from_user.first_name
    else:
        studentname = message.from_user.username
    return studentname

def temaDef(m):
    print('–≤—ã–±–æ—Ä —Ç–µ–º—ã')
    m=m.text.lower()
    if '—Å—Ä–∞–≤–Ω' in m:
        return 'srav',''
    elif '–æ–∫—Ä—É–≥–ª' in m:
        return 'number','round'
    elif '–∞—Ä–∏—Ñ–º' in m or '–≤—ã—á–∏—Å–ª' in m:
        return 'number',''
    elif '–≤–µ–ª–∏—á' in m:
        return 'number', 'preob'
    elif '–¥—Ä–æ–±' in m:
        return 'base','drob'
    else:
        return 'base',''

#–°–¢–ê–†–¢–û–í–û–ï –°–û–û–ë–©–ï–ù–ò–ï:
@bot.message_handler(commands=['start'])
def start(message):
    print('–ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ')
    studentname=whatname(message)
    user_id = message.from_user.id
    # —Å–µ—Å—Å–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data[user_id] = {
        "state": WAITING_FOR_ANSWER,
        "state_choice": FIRST_CHOICE,
        "first_choice": None,
        "second_choice": None,
        "third_choice": None,
        "current_question": 0,
        "type_question":'number',
        "sub_type":'',
        "score": 0,
        "problem": None,
        "answer": None,
        "image":None,
        "start_time": time.time(),
        'list': [],
        'studentname': studentname,
        'start':0
    }
    bot.send_message(message.chat.id, f"–ü—Ä–∏–≤–µ—Ç! {studentname} –≠—Ç–æ MathBot, –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º:", reply_markup=keyboard1)

def choicerezhim(message):
    print('–≤—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞')
    user_id = message.from_user.id
    global QUESTIONLEN
    if '–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞' in user_data[user_id]['first_choice']:
        QUESTIONLEN = 5
        training(message,user_data[user_id]['second_choice'],user_data[user_id]['third_choice'])
    else:
        QUESTIONLEN = 10
        competitive(message, user_data[user_id]['second_choice'], user_data[user_id]['third_choice'])
    pass

#–†–ï–ñ–ò–ú –¢–ï–†–ù–ò–†–û–í–ö–ò
def training(message,l,t):
    bot.send_message(message.chat.id, "–†–µ–∂–∏–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ üëç!", reply_markup=telebot.types.ReplyKeyboardRemove())
    user_id = message.from_user.id
    send_next_question(message.chat.id, user_id, message)

#–†–ï–ñ–ò–ú –°–û–†–ï–í–ù–û–í–ê–ù–ò–Ø
def competitive(message,l,t):
    spisokemo = ['3Ô∏è‚É£', '2Ô∏è‚É£', '1Ô∏è‚É£']
    user_id = message.from_user.id
    bot.send_message(message.chat.id, "–°–æ—Ä–µ–≤–Ω–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π —Ä–µ–∂–∏–º üöÄ!",reply_markup=telebot.types.ReplyKeyboardRemove())
    for i in range(3):#–æ–±—Ä–∞—Ç–Ω—ã–π –æ—Ç—Å—á–µ—Ç
        time.sleep(1)
        bot.send_message(message.chat.id,spisokemo[i])

    user_data[user_id]['start_time']=time.time()#—Å—Ç–∞—Ä—Ç –≤—Ä–µ–º–µ–Ω–∏
    print('—Å—Ç–∞—Ä—Ç –≤—Ä–µ–º–µ–Ω–∏')
    user_data[user_id]['studentname']=whatname(message)
    send_next_question(message.chat.id, user_id,message)


@bot.message_handler(func=lambda message: True)
def handle_message(message):
    print('–ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ')
    user_id = message.from_user.id
    # print(user_id)#################################
    if user_id not in user_data:
        print('–Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
        bot.send_message(message.chat.id, "–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start")
        return
    # if user_data[user_id]['problem']=='–ø—É—Å—Ç–æ':
    #     print('–Ω–µ—Ç –∑–∞–¥–∞—á–∏')
    #     bot.send_message(message.chat.id, "–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start")
    #     return

    state_choice = user_data[user_id]["state_choice"]
    print('–Ω–∞—á–∞–ª–æ –≤—ã–±–æ—Ä–æ–≤')
    if user_data[user_id]['start']==0:
        print('–Ω–µ —Å—Ç–∞—Ä—Ç')
        if state_choice  == FIRST_CHOICE:
            print('–≤—ã–±–æ—Ä1')
            if message.text in ["üëç –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞","üöÄ –°–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–µ"]:
                user_data[user_id]["first_choice"] = message.text
                user_data[user_id]["state_choice"] = SECOND_CHOICE
                show_second_choice_keyboard(message)
            else:
                bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤")

        elif state_choice == SECOND_CHOICE:
            print('–≤—ã–±–æ—Ä2')
            if  '–£—Ä–æ–≤–µ–Ω—å' in message.text:
                user_data[user_id]["second_choice"] = message.text
                user_data[user_id]["state_choice"] = THIRD_CHOICE
                if '–¢—Ä–µ–Ω–∏—Ä' in user_data[user_id]["first_choice"]:
                    show_third_choice_keyboardTREN(message,message.text)
                else:
                    show_third_choice_keyboardCOMP(message,message.text)
            else:
                bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤")

        elif state_choice == THIRD_CHOICE:
                print('–≤—ã–±–æ—Ä3')
                user_data[user_id]['type_question'],user_data[user_id]['sub_type']=temaDef(message)
                user_data[user_id]["third_choice"] = message.text
                user_data[user_id]['start']=1
                print('–≤–∫–ª—é—á–∏–ª —Å—Ç–∞—Ä—Ç')
                bot.send_message(message.chat.id, "–í—ã–±–æ—Ä –∑–∞–ø–∏—Å–∞–Ω.", reply_markup=types.ReplyKeyboardRemove())
                bot.send_message(message.chat.id, f"#-{user_data[user_id]['first_choice']}"
                                                  f"#-{user_data[user_id]['second_choice']}"
                                                  f"#-{user_data[user_id]['third_choice']}")
                choicerezhim(message)
            # else:
            #     bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤")


    if user_data[user_id]["state"] == WAITING_FOR_ANSWER and user_data[user_id]["start"]:
            print('–Ω–∞—á–∞–ª–æ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–≤–µ—Ç–∞')
            if user_data[user_id]['problem'] == '–ø—É—Å—Ç–æ':
                print('–Ω–µ—Ç –∑–∞–¥–∞—á–∏')
                bot.send_message(message.chat.id, "–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start")
                return
            user_answer ='none'
            if user_data[user_id]["type_question"]=='number':
                    print('–æ—Ç–≤–µ—Ç —á–∏—Å–ª–æ')
                    try:
                        user_answer = float(message.text)###########!!!!!!!!!!!!!
                    except ValueError:
                        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
            elif user_data[user_id]["type_question"]=='srav':
                print('–æ—Ç–≤–µ—Ç –∑–Ω–∞–∫ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è')
                if message.text in ['<','>','=']:
                    user_answer = message.text####
                else:
                    bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∑–Ω–∞–∫.")
            elif user_data[user_id]["type_question"]=='base' and user_data[user_id]['sub_type']=='':
                print('–∏–∑  –±–∞–∑—ã —á–∏—Å–ª–æ')
                try:
                    user_answer = float(message.text)####
                except:
                    bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –∫ –∑–∞–¥–∞—á–µ –≤ –≤–∏–¥–µ —á–∏—Å–ª–∞.")
            elif user_data[user_id]["type_question"]=='base' and user_data[user_id]['sub_type']=='drob':
                print('–∏–∑  –±–∞–∑—ã –¥—Ä–æ–±—å')
                print(message.text)
                if message.text!=user_data[user_id]["third_choice"]:
                    user_answer = message.text####
                else:
                    bot.send_message(message.chat.id,
                                     "–í–≤–µ–¥–∏—Ç–µ –¥—Ä–æ–±—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ: —á–∏—Å–ª–∏—Ç–µ–ª—å/–∑–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—å, –Ω–∞–ø—Ä–∏–º–µ—Ä 1/3")
                    bot.send_message(message.chat.id,
                                     "–ê –µ—Å–ª–∏ –¥—Ä–æ–±—å —Å–º–µ—à–∞–Ω–Ω–∞—è, —Ç–æ –ø–æ—Å–ª–µ —Ü–µ–ª–æ–π —á–∞—Å—Ç–∏ —Å—Ç–∞–≤–∏–º –Ω–∏–∂–Ω–µ–µ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ 1_1/3")
            correct_answer = user_data[user_id]["answer"]

            # print(user_data)
            if user_answer!='none':
                print('–ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞')
                print(user_answer,type(user_answer))
                try:
                    if user_answer == correct_answer or float(user_answer)==float(correct_answer):
                        user_data[user_id]["score"] += 1
                        bot.send_message(message.chat.id, "–ü—Ä–∞–≤–∏–ª—å–Ω–æ!")
                    else:
                        bot.send_message(message.chat.id, f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ! –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_answer}")
                except:
                    if user_answer == correct_answer:
                        user_data[user_id]["score"] += 1
                        bot.send_message(message.chat.id, "–ü—Ä–∞–≤–∏–ª—å–Ω–æ!")
                    else:
                        bot.send_message(message.chat.id, f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ! –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_answer}")
                user_data[user_id]["state"] = SENDING_NEXT_QUESTION
                print('—Å–ª–µ–¥ –≤–æ–ø—Ä–æ—Å')
                send_next_question(message.chat.id, user_id,message)
            print(user_data)
    if user_id in user_data:
        print('–ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ waiting')
        user_data[user_id]["state"] = WAITING_FOR_ANSWER

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.polling(none_stop=True)