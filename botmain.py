import time
import random
import mainbase
import telebot
import fromGenerate
from telebot import types
import sqlite3

#t.me/AlabugaMathtest_bot.
from tokenpy import token
bot = telebot.TeleBot(token)


# –°–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞
WAITING_FOR_ANSWER = 0
SENDING_NEXT_QUESTION = 1
FIRST_CHOICE = 1
SECOND_CHOICE = 2
THIRD_CHOICE = 3

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_data = {}
QLEN=4

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏ –∏ —ç–º–æ–¥–∑–∏
keyboard1 = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
button1 = telebot.types.KeyboardButton("üëç –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞")  # –≠–º–æ–¥–∑–∏ üëç
button2 = telebot.types.KeyboardButton("üöÄ –°–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–µ")  # –≠–º–æ–¥–∑–∏ üöÄ
keyboard1.add(button1, button2)

keyboard2 = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
buttons = [telebot.types.KeyboardButton(f"üëç –£—Ä–æ–≤–µ–Ω—å {i}") for i in range(1, 7)]
keyboard2.add(*buttons)

keyboard3 = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
# button1 = telebot.types.KeyboardButton("üëç –¢–µ–º–∞1")  # –≠–º–æ–¥–∑–∏ üëç
# button2 = telebot.types.KeyboardButton("üëç –¢–µ–º–∞2")  # –≠–º–æ–¥–∑–∏ üëç
# button3 = telebot.types.KeyboardButton("üëç –¢–µ–º–∞3")  # –≠–º–æ–¥–∑–∏ üëç
# keyboard3.add(button1, button2, button3)
#–ü–û–ö–ê–ó–ê–¢–¨ –ö–õ–ê–í–ò–ê–¢–£–†–´
def show_first_choice_keyboard(message):
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º:", reply_markup=keyboard1)

def show_second_choice_keyboard(message):
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å:", reply_markup=keyboard2)

def show_third_choice_keyboard(message,k):
    spisokTem =[['0 —É—Ä–æ–≤–µ–Ω—å'],
             ['–ê—Ä–∏—Ñ–º–µ—Ç–∏–∫–∞','–ó–∞–¥–∞—á–∏','–§–∏–≥—É—Ä—ã','–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è'],
             ['–ê—Ä–∏—Ñ–º–µ—Ç–∏–∫–∞','–ó–∞–¥–∞—á–∏','–§–∏–≥—É—Ä—ã','–ü–µ—Ä–∏–º–µ—Ç—Ä'],
             ['–ü–ª–æ—â–∞–¥—å','–ó–∞–¥–∞—á–∏','–§–∏–≥—É—Ä—ã','–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è'],
             ['–í–µ–ª–∏—á–∏–Ω—ã','–ê—Ä–∏—Ñ–º–µ—Ç–∏–∫–∞','–ó–∞–¥–∞—á–∏ –Ω–∞ –¥–≤–∏–∂–µ–Ω–∏–µ','–ó–∞–¥–∞—á–∏ –Ω–∞ —Ä–∞–±–æ—Ç—É','–ó–∞–¥–∞—á–∏ –∫—É–ø–ª–∏-–ø—Ä–æ–¥–∞–∂–∏',
              '–£—Ä–∞–≤–Ω–µ–Ω–∏—è','–ü–æ—Ä—è–¥–æ–∫ –¥–µ–π—Å—Ç–≤–∏–π'],
             ['–í—ã—á–∏—Å–ª–µ–Ω–∏—è','–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è','–°—Ä–∞–≤–Ω–µ–Ω–∏—è','–ü—Ä–∏–∑–Ω–∞–∫–∏ –¥–µ–ª–∏–º–æ—Å—Ç–∏','–û–∫—Ä—É–≥–ª–µ–Ω–∏–µ',
              '–ó–∞–¥–∞—á–∏','–í–µ–ª–∏—á–∏–Ω—ã','–ì–µ–æ–º–µ—Ç—Ä–∏—è','–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–Ω—ã–π –ª—É—á'],
             ['–í—ã—á–∏—Å–ª–µ–Ω–∏—è','–ù–û–î –∏ –ù–û–ö','–°—Ä–∞–≤–Ω–µ–Ω–∏—è','–ó–∞–¥–∞—á–∏','–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–Ω–∞—è –ø—Ä—è–º–∞—è','–ó–∞–¥–∞—á–∏ 6.3','–ì–µ–æ–º–µ—Ç—Ä–∏—è']]
    k=int(k[-1])
    print(k)
    buttons = [telebot.types.KeyboardButton(f"üëç –¢–µ–º–∞ {i}") for i in spisokTem[k]]
    keyboard3.add(*buttons)
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É:", reply_markup=keyboard3)


def generate_error_message(error_count):
    print(error_count)
    if error_count == 1:
        return "–∫–∞"
    elif 2 <= error_count <= 4:
        return "–∫–∏"
    else:
        return "–æ–∫"

"""–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
def send_next_question(chat_id, user_id,message):
    print('next')####################
    user_data[user_id]["current_question"] += 1
    print(user_data[user_id]["current_question"], user_data[user_id]["score"],)########################
    if user_data[user_id]["current_question"] > QLEN:
        end_time = time.time()#–∫–æ–Ω–µ—Ü –≤—Ä–µ–º–µ–Ω–∏
        total_time = end_time - user_data[user_id]["start_time"]
        if user_data[user_id]['score']==user_data[user_id]["current_question"]-1:
            bot.send_message(chat_id,
                      f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –≤—ã –ø—Ä–æ—à–ª–∏ –±–µ–∑ –æ—à–∏–±–æ–∫.\n–í—Ä–µ–º—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è: {total_time:.2f} —Å–µ–∫—É–Ω–¥.")
            mainbase.newscore(user_data[user_id]['studentname'],total_time)
            # start(message)
        else:
            bot.send_message(chat_id,
                             f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, —É –≤–∞—Å {user_data[user_id]['current_question']-user_data[user_id]['score']-1} "
                             f"–æ—à–∏–±{generate_error_message(user_data[user_id]['current_question']-user_data[user_id]['score']-1)}. –í—Ä–µ–º—è –Ω–µ –∑–∞—Å—á–∏—Ç–∞–Ω–æ.")
            print('#########################')
            print(user_data[user_id]["state"])
            print(user_data[user_id])
            #
        del user_data[user_id]#—É–¥–∞–ª–∏—Ç—å —Å–µ—Å—Å–∏—é
        start(message)#–Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é
        return

    print(user_data)

    problem,answer = fromGenerate.taskcount(message,user_data)
    user_data[user_id]['list'].append(problem) #–≤ —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–º–µ—Ä–æ–≤
    user_data[user_id]["problem"] = problem
    user_data[user_id]["answer"] = answer
    bot.send_message(chat_id, problem)

def whatname(message):
    if message.from_user.first_name and message.from_user.last_name:
        studentname = f'{message.from_user.first_name} {message.from_user.last_name}'
    elif message.from_user.first_name:
        studentname = message.from_user.first_name
    else:
        studentname = message.from_user.username
    return studentname

#–°–¢–ê–†–¢–û–í–û–ï –°–û–û–ë–©–ï–ù–ò–ï:
@bot.message_handler(commands=['start'])
def start(message):
    print(message)
    studentname=whatname(message)
    user_id = message.from_user.id
    # —Å–µ—Å—Å–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data[user_id] = {
        "state": WAITING_FOR_ANSWER,
        "state_choice": FIRST_CHOICE,
        "first_choice": None,
        "second_choice": None,
        "third_choice": None,
        "current_question": 0,
        "score": 0,
        "problem": None,
        "answer": None,
        "start_time": time.time(),
        'list': [],
        'studentname': studentname,
        'start':0
    }
    bot.send_message(message.chat.id, f"–ü—Ä–∏–≤–µ—Ç! {studentname} –≠—Ç–æ MathBot, –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º:", reply_markup=keyboard1)

def start_reg(message):
    user_id = message.from_user.id
    if '–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞' in user_data[user_id]['first_choice']:
        training(message,user_data[user_id]['second_choice'],user_data[user_id]['third_choice'])
    else:
        competitive(message, user_data[user_id]['second_choice'], user_data[user_id]['third_choice'])
    pass

#–†–ï–ñ–ò–ú –¢–ï–†–ù–ò–†–û–í–ö–ò

def training(message,l,t):
    bot.send_message(message.chat.id, "–†–µ–∂–∏–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ üëç!", reply_markup=telebot.types.ReplyKeyboardRemove())

#–†–ï–ñ–ò–ú –°–û–†–ï–í–ù–û–í–ê–ù–ò–Ø

def competitive(message,l,t):
    spisokemo = ['3Ô∏è‚É£', '2Ô∏è‚É£', '1Ô∏è‚É£']
    user_id = message.from_user.id
    bot.send_message(message.chat.id, "–°–æ—Ä–µ–≤–Ω–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π —Ä–µ–∂–∏–º üöÄ!",reply_markup=telebot.types.ReplyKeyboardRemove())
    for i in range(3):#–æ–±—Ä–∞—Ç–Ω—ã–π –æ—Ç—Å—á–µ—Ç
        time.sleep(1)
        bot.send_message(message.chat.id,spisokemo[i])

    user_data[user_id]['start_time']=time.time()#—Å—Ç–∞—Ä—Ç –≤—Ä–µ–º–µ–Ω–∏
    user_data[user_id]['studentname']=whatname(message)
    send_next_question(message.chat.id, user_id,message)


@bot.message_handler(func=lambda message: True)
def handle_message(message):
    user_id = message.from_user.id
    # print(user_id)#################################
    if user_id not in user_data:
        return
    state_choice = user_data[user_id]["state_choice"]
    if user_data[user_id]['start']==0:
        if state_choice  == FIRST_CHOICE:
            if message.text in ["üëç –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞","üöÄ –°–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–µ"]:
                user_data[user_id]["first_choice"] = message.text
                user_data[user_id]["state_choice"] = SECOND_CHOICE
                show_second_choice_keyboard(message)
            else:
                bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤")

        elif state_choice == SECOND_CHOICE:
            if  '–£—Ä–æ–≤–µ–Ω—å' in message.text:
                user_data[user_id]["second_choice"] = message.text
                user_data[user_id]["state_choice"] = THIRD_CHOICE
                show_third_choice_keyboard(message,message.text)
            else:
                bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤")

        elif state_choice == THIRD_CHOICE:
            # print(message.text)
            if '–¢–µ–º–∞' in message.text:

                user_data[user_id]["third_choice"] = message.text
                user_data[user_id]['start']=1
                bot.send_message(message.chat.id, "–í–∞—à–∏ –≤—ã–±–æ—Ä—ã –∑–∞–ø–∏—Å–∞–Ω—ã!", reply_markup=types.ReplyKeyboardRemove())
                bot.send_message(message.chat.id, f"#-{user_data[user_id]['first_choice']}"
                                                  f"#-{user_data[user_id]['second_choice']}"
                                                  f"#-{user_data[user_id]['third_choice']}")
                start_reg(message)
            else:
                bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤")

    if user_data[user_id]["state"] == WAITING_FOR_ANSWER and user_data[user_id]["start"]:
        try:
            user_answer = int(message.text)
            correct_answer = user_data[user_id]["answer"]
            # print(user_data)
            if user_answer == correct_answer:
                user_data[user_id]["score"] += 1
                bot.send_message(message.chat.id, "–ü—Ä–∞–≤–∏–ª—å–Ω–æ!")
            else:
                bot.send_message(message.chat.id, f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ! –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_answer}")

            user_data[user_id]["state"] = SENDING_NEXT_QUESTION
            send_next_question(message.chat.id, user_id,message)
            print(user_data)
            if user_id in user_data:
                    user_data[user_id]["state"] = WAITING_FOR_ANSWER

        except ValueError:
            bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.polling(none_stop=True)